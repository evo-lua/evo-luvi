local ipairs = ipairs
local table_concat = table.concat
local unpack = unpack

local uv = require("uv")

local DEFAULT_REQUIRED_VERSION = "1.11"
local DEFAULT_BUILD_DIRECTORY_NAME = path.join(uv.cwd(), "ninjabuild") -- Must use absolute paths for out-of-source builds

local NinjaFile = {
	requiredVersion = DEFAULT_REQUIRED_VERSION,
	buildDirectory = DEFAULT_BUILD_DIRECTORY_NAME,
	includes = {},
	-- Untested (NYI)
	defaultTargets = {},
	subninjas = {},
	pool = {},
}

NinjaFile.DEFAULT_REQUIRED_VERSION = DEFAULT_REQUIRED_VERSION
NinjaFile.DEFAULT_BUILD_DIRECTORY_NAME = DEFAULT_BUILD_DIRECTORY_NAME
NinjaFile.AUTOGENERATION_HEADER_TEXT = "# Automatically generated by evo-ninja.lua\n# Editing this file is pointless; update the build definitions instead :)"

function NinjaFile:Construct()
	local instance = {
		ruleDeclarations = {},
		buildEdges = {},
		variables = {},
	}

	instance.__index = self
	setmetatable(instance, instance)

	return instance
end

function NinjaFile:Save(filePath)
	local fileContents = self:ToString()
	C_FileSystem.WriteFile(filePath, fileContents)
end

function NinjaFile:ToString()
	local fileContents = {}

	fileContents[#fileContents+1] = NinjaFile.AUTOGENERATION_HEADER_TEXT
	fileContents[#fileContents+1] = "ninja_required_version = " .. self.requiredVersion

	for index, variableName in ipairs(self.variables) do
		local declarationLine = self.variables[variableName]
		fileContents[#fileContents+1] = variableName .. " = " .. declarationLine
	end

	for index, ruleInfo in ipairs(self.ruleDeclarations) do
		local ruleName = ruleInfo.name
		fileContents[#fileContents+1] = "rule " .. ruleName

		-- Use indices instead of key-value pairs here to make the output deterministic (and therefore testable)
		for _, lineInfo in ipairs(ruleInfo) do
			local fieldName = lineInfo.name
			local ruleString = table_concat(lineInfo, " ")
			fileContents[#fileContents+1] = "  " .. fieldName .. " = " .. ruleString
		end
	end

	for index, buildEdge in ipairs(self.buildEdges) do
		fileContents[#fileContents+1] = "build " .. buildEdge.target ..": " .. table_concat(buildEdge.dependencyTokens, " ")
		for _, variable in ipairs(buildEdge.variableOverrides) do
			fileContents[#fileContents+1] = "  " .. variable.name .. " = " .. variable.declarationLine
		end
	end

	for index, targetID in ipairs(self.includes) do
		fileContents[#fileContents+1] = "include " .. targetID .. ".ninja"
	end

	return table_concat(fileContents, "\n") .. "\n"
end

function NinjaFile:AddVariable(name, declarationLine)
	self.variables[#self.variables+1] = name
	self.variables[name] = declarationLine
end

function NinjaFile:AddRule(name, ruleInfo)
	-- self.ruleDeclarations[#self.ruleDeclarations+1] = name
	-- self.ruleDeclarations[name] = unpack(ruleInfo)
	self.ruleDeclarations[#self.ruleDeclarations+1] = {
		name = name,
		unpack(ruleInfo),
	}
end

function NinjaFile:AddBuildEdge(target, dependencyTokens, variableOverrides)
	self.buildEdges[#self.buildEdges+1] = {
		target = target,
		dependencyTokens = dependencyTokens,
		variableOverrides = variableOverrides or {},
	}
end

function NinjaFile:AddInclude(targetID)
	self.includes[#self.includes+1] = targetID
end

NinjaFile.__call = NinjaFile.Construct
setmetatable(NinjaFile, NinjaFile)

return NinjaFile