local path = _G.path

_G.currentNamespace = "any"

local __filename = "test-path-basename.js"

_G.currentNamespace = "win32"
assertStrictEqual(path.win32.basename(__filename), "test-path-basename.js")
assertStrictEqual(path.win32.basename(__filename, ".js"), "test-path-basename")
assertStrictEqual(path.win32.basename(".js", ".js"), "")
assertStrictEqual(path.win32.basename(""), "")
assertStrictEqual(path.win32.basename("/dir/basename.ext"), "basename.ext")
assertStrictEqual(path.win32.basename("/basename.ext"), "basename.ext")
assertStrictEqual(path.win32.basename("basename.ext"), "basename.ext")
assertStrictEqual(path.win32.basename("basename.ext/"), "basename.ext")
assertStrictEqual(path.win32.basename("basename.ext//"), "basename.ext")
assertStrictEqual(path.win32.basename("aaa/bbb", "/bbb"), "bbb")
assertStrictEqual(path.win32.basename("aaa/bbb", "a/bbb"), "bbb")
assertStrictEqual(path.win32.basename("aaa/bbb", "bbb"), "bbb")
assertStrictEqual(path.win32.basename("aaa/bbb//", "bbb"), "bbb")
assertStrictEqual(path.win32.basename("aaa/bbb", "bb"), "b")
assertStrictEqual(path.win32.basename("aaa/bbb", "b"), "bb")
assertStrictEqual(path.win32.basename("/aaa/bbb", "/bbb"), "bbb")
assertStrictEqual(path.win32.basename("/aaa/bbb", "a/bbb"), "bbb")
assertStrictEqual(path.win32.basename("/aaa/bbb", "bbb"), "bbb")
assertStrictEqual(path.win32.basename("/aaa/bbb//", "bbb"), "bbb")
assertStrictEqual(path.win32.basename("/aaa/bbb", "bb"), "b")
assertStrictEqual(path.win32.basename("/aaa/bbb", "b"), "bb")
assertStrictEqual(path.win32.basename("/aaa/bbb"), "bbb")
assertStrictEqual(path.win32.basename("/aaa/"), "aaa")
assertStrictEqual(path.win32.basename("/aaa/b"), "b")
assertStrictEqual(path.win32.basename("/a/b"), "b")
assertStrictEqual(path.win32.basename("//a"), "a")
assertStrictEqual(path.win32.basename("a", "a"), "")

_G.currentNamespace = "posix"
assertStrictEqual(path.posix.basename(__filename), "test-path-basename.js")
assertStrictEqual(path.posix.basename(__filename, ".js"), "test-path-basename")
assertStrictEqual(path.posix.basename(".js", ".js"), "")
assertStrictEqual(path.posix.basename(""), "")
assertStrictEqual(path.posix.basename("/dir/basename.ext"), "basename.ext")
assertStrictEqual(path.posix.basename("/basename.ext"), "basename.ext")
assertStrictEqual(path.posix.basename("basename.ext"), "basename.ext")
assertStrictEqual(path.posix.basename("basename.ext/"), "basename.ext")
assertStrictEqual(path.posix.basename("basename.ext//"), "basename.ext")
assertStrictEqual(path.posix.basename("aaa/bbb", "/bbb"), "bbb")
assertStrictEqual(path.posix.basename("aaa/bbb", "a/bbb"), "bbb")
assertStrictEqual(path.posix.basename("aaa/bbb", "bbb"), "bbb")
assertStrictEqual(path.posix.basename("aaa/bbb//", "bbb"), "bbb")
assertStrictEqual(path.posix.basename("aaa/bbb", "bb"), "b")
assertStrictEqual(path.posix.basename("aaa/bbb", "b"), "bb")
assertStrictEqual(path.posix.basename("/aaa/bbb", "/bbb"), "bbb")
assertStrictEqual(path.posix.basename("/aaa/bbb", "a/bbb"), "bbb")
assertStrictEqual(path.posix.basename("/aaa/bbb", "bbb"), "bbb")
assertStrictEqual(path.posix.basename("/aaa/bbb//", "bbb"), "bbb")
assertStrictEqual(path.posix.basename("/aaa/bbb", "bb"), "b")
assertStrictEqual(path.posix.basename("/aaa/bbb", "b"), "bb")
assertStrictEqual(path.posix.basename("/aaa/bbb"), "bbb")
assertStrictEqual(path.posix.basename("/aaa/"), "aaa")
assertStrictEqual(path.posix.basename("/aaa/b"), "b")
assertStrictEqual(path.posix.basename("/a/b"), "b")
assertStrictEqual(path.posix.basename("//a"), "a")
assertStrictEqual(path.posix.basename("a", "a"), "")

-- On Windows a backslash acts as a path separator.
_G.currentNamespace = "win32"
assertStrictEqual(path.win32.basename("\\dir\\basename.ext"), "basename.ext")
assertStrictEqual(path.win32.basename("\\basename.ext"), "basename.ext")
assertStrictEqual(path.win32.basename("basename.ext"), "basename.ext")
assertStrictEqual(path.win32.basename("basename.ext\\"), "basename.ext")
assertStrictEqual(path.win32.basename("basename.ext\\\\"), "basename.ext")
assertStrictEqual(path.win32.basename("foo"), "foo")
assertStrictEqual(path.win32.basename("aaa\\bbb", "\\bbb"), "bbb")
assertStrictEqual(path.win32.basename("aaa\\bbb", "a\\bbb"), "bbb")
assertStrictEqual(path.win32.basename("aaa\\bbb", "bbb"), "bbb")
assertStrictEqual(path.win32.basename("aaa\\bbb\\\\\\\\", "bbb"), "bbb")
assertStrictEqual(path.win32.basename("aaa\\bbb", "bb"), "b")
assertStrictEqual(path.win32.basename("aaa\\bbb", "b"), "bb")
assertStrictEqual(path.win32.basename("C:"), "")
assertStrictEqual(path.win32.basename("C:."), ".")
assertStrictEqual(path.win32.basename("C:\\"), "")
assertStrictEqual(path.win32.basename("C:\\dir\\base.ext"), "base.ext")
assertStrictEqual(path.win32.basename("C:\\basename.ext"), "basename.ext")
assertStrictEqual(path.win32.basename("C:basename.ext"), "basename.ext")
assertStrictEqual(path.win32.basename("C:basename.ext\\"), "basename.ext")
assertStrictEqual(path.win32.basename("C:basename.ext\\\\"), "basename.ext")
assertStrictEqual(path.win32.basename("C:foo"), "foo")
assertStrictEqual(path.win32.basename("file:stream"), "file:stream")
assertStrictEqual(path.win32.basename("a", "a"), "")

-- On unix a backslash is just treated as any other character.
_G.currentNamespace = "posix"
assertStrictEqual(path.posix.basename("\\dir\\basename.ext"), "\\dir\\basename.ext")
assertStrictEqual(path.posix.basename("\\basename.ext"), "\\basename.ext")
assertStrictEqual(path.posix.basename("basename.ext"), "basename.ext")
assertStrictEqual(path.posix.basename("basename.ext\\"), "basename.ext\\")
assertStrictEqual(path.posix.basename("basename.ext\\\\"), "basename.ext\\\\")
assertStrictEqual(path.posix.basename("foo"), "foo")

-- POSIX filenames may include control characters
-- c.f. http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html
local controlCharFilename = string.format("Icon%s", string.char(13))
assertStrictEqual(path.posix.basename(string.format("/a/b/%s", controlCharFilename)), controlCharFilename)

print("OK\ttest-path-basename")
